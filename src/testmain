import { useState, useEffect } from "react";
import Cars from "./Cars.jsx";

function CarList () {
    const [cars, setCars] = useState([]);
    const [newCar, setNewCar] = useState({name: "", about: "", type: ""});
    const [editedCar, setEditedCar] = useState(null);
    const [loading, setLoading] = useState(true); // Nieuwe staat voor laadstatus

    const getCars = async () => {
        try {
            setLoading(true); // Zet loading op true bij het starten van de API-oproep

            const response = await fetch("http://145.24.222.249:8000/cars", {
                method: "GET",
                headers: {
                    "Accept": "application/json",
                },
            });

            if (response.ok) {
                const carCollection = await response.json();
                setCars(carCollection.items);
            } else {
                throw new Error("Failed to fetch cars");
            }
        } catch (error) {
            console.error("Error fetching cars:", error);
        } finally {
            setLoading(false); // Zet loading op false, ongeacht of de API-oproep succesvol is of niet
        }
    };

    // Functie om een nieuwe auto toe te voegen
    const addCar = async () => {
        try {
            const response = await fetch("http://145.24.222.249:8000/cars", {
                method: "POST",
                headers: {
                    "Accept": "application/json",
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(newCar),
            });

            if (response.ok) {
                // Als de API-oproep succesvol is, haal de bijgewerkte lijst met auto's op en reset de nieuwe auto
                await getCars();
                setNewCar({name: "", type: "", about: ""});
            } else {
                throw new Error("Failed to add car");
            }
        } catch (error) {
            console.error("Error adding car:", error);
        }
    };

    // Functie om het bewerken van een auto te starten
    const startEditing = (car) => {
        setEditedCar({...car}); // Kopieer het auto-object om directe wijzigingen te voorkomen
    };

    // Functie om het bewerken van een auto te annuleren
    const cancelEditing = () => {
        setEditedCar(null);
    };

    // Functie om een bewerkte auto op te slaan
    const updateCar = async () => {
        try {
            // Update de staat met de bewerkte auto
            setCars((prevCars) =>
                prevCars.map((car) => (car._id === editedCar._id ? editedCar : car))
            );

            const response = await fetch(`http://145.24.222.249:8000/cars/${editedCar._id}`, {
                method: "PUT",
                headers: {
                    "Accept": "application/json",
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(editedCar),
            });

            if (response.ok) {
                // De API-oproep was succesvol; hier is geen verdere actie nodig
                cancelEditing();
            } else {
                // Herstel de wijzigingen als de API-oproep mislukt
                setCars((prevCars) =>
                    prevCars.map((car) => (car._id === editedCar._id ? car : car))
                );
                throw new Error("Failed to save changes");
            }
        } catch (error) {
            console.error("Error saving changes:", error);
        }
    };

    // Functie om een auto te verwijderen
    const deleteCar = async (carId) => {
        try {
            const response = await fetch(`http://145.24.222.249:8000/cars/${carId}`, {
                method: "DELETE",
                headers: {
                    "Accept": "application/json",
                },
            });

            if (response.ok) {
                // Update de lijst met auto's na het verwijderen van een auto
                await getCars();
            } else {
                throw new Error("Failed to delete car");
            }
        } catch (error) {
            console.error("Error deleting car:", error);
        }
    };

    // Functie om de details van een geselecteerde auto te tonen
    const showCarDetails = (selectedCar) => {
        const updatedCars = cars.map((car) => ({
            ...car,
            showDetails: car._id === selectedCar._id,
            hideDetails: () => hideCarDetails(car),
        }));
        setCars(updatedCars);
    };

    // Functie om de details van een auto te verbergen
    const hideCarDetails = () => {
        const updatedCars = cars.map((c) => ({
            ...c,
            showDetails: false,
        }));
        setCars(updatedCars);
    };

    // useEffect om de lijst met auto's op te halen bij het laden van de component
    useEffect(() => {
        getCars();
    }, []);

    return (
        <div className="App">
            <h1>Car Collection</h1>
            <div className="add-car">
                <h2>Add New Car</h2>
                <input
                    type="text"
                    placeholder="Name"
                    value={newCar.name}
                    onChange={(e) => setNewCar({...newCar, name: e.target.value})}
                />
                <input
                    type="text"
                    placeholder="Type"
                    value={newCar.type}
                    onChange={(e) => setNewCar({...newCar, type: e.target.value})}
                />
                <input
                    type="text"
                    placeholder="About"
                    value={newCar.about}
                    onChange={(e) => setNewCar({...newCar, about: e.target.value})}
                />
                <button onClick={addCar}>Add Car</button>
            </div>

            {editedCar && (
                <div className="edit-car">
                    <h2>Edit Car</h2>
                    <input
                        type="text"
                        placeholder="Name"
                        value={editedCar.name}
                        onChange={(e) => setEditedCar({...editedCar, name: e.target.value})}
                    />
                    <input
                        type="text"
                        placeholder="Type"
                        value={editedCar.type}
                        onChange={(e) => setEditedCar({...editedCar, type: e.target.value})}
                    />
                    <input
                        type="text"
                        placeholder="About"
                        value={editedCar.about}
                        onChange={(e) => setEditedCar({...editedCar, about: e.target.value})}
                    />
                    <button onClick={updateCar}>Save Changes</button>
                    <button onClick={cancelEditing}>Cancel</button>
                </div>
            )}
            {loading ? (
                "Loading..."
            ) : (
                <Cars
                    cars={cars}
                    startEditing={startEditing}
                    deleteCar={deleteCar}
                    showCarDetails={showCarDetails}
                />
            )}
        </div>
    );
}

export default CarList;
